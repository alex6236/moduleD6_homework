"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-eucd2$q^jr+1ea)8(8by&-p+%+c_u^w$#v&dc_x2_i1qk_q_(('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True



# Application definition

INSTALLED_APPS = [
    'allauth',
    'allauth.account',
    # =========================
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # ==================================
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news.apps.NewsConfig',
    'accounts.apps.AccountsConfig',
    # =============================	
    # 
    # =============================
    'django_filters',
    'static',
    'signup',
    'users',
    'mail',
    # =========== allauth ============
    # 'allauth',
    # 'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # ====================================================
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # ====================================
                # 'django_filters.templatetags.django_filters',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# STATICFILES_DIRS = [
#     BASE_DIR / "static"
# ]
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# LOGIN_URL = 'signup/login/'
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

AUTHENTICATION_BACKENDS = [
   # Необходимо войти по имени пользователя в Django admin, 
   # независимо от `allauth`

   'django.contrib.auth.backends.ModelBackend',
  
   # специфические методы аутентификации "allauth", 
   # такие как вход по электронной почте

   'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
# ACCOUNT_UNIQUE_EMAIL = False

ALLOWED_HOSTS = [ '127.0.0.1',
                 'localhost',
             ]

ACCOUNT_FORMS = {
    'signup': 'accounts.forms.MailRegisterForm',
    'login': 'accounts.forms.MailLoginForm',
    'password_change': 'accounts.forms.PasswordChangeForm',
}

# EMAIL_HOST = 'smtp.yandex.ru'   # адрес сервера Яндекс-почты для всех один и тот же
# EMAIL_PORT = 465                # порт smtp сервера тоже одинаковый
# EMAIL_HOST_USER = ''            # ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать
#                                 # user, иными словами, это всё то что идёт до собаки
# EMAIL_HOST_PASSWORD = ''        # пароль от почты
# EMAIL_USE_SSL = True            # Яндекс использует ssl, подробнее о том, что это, почитайте на Википедии, но
                                # включать его здесь обязательно

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_USE_SSL = True

EMAIL_HOST_USER = 'skillfactory.course'
EMAIL_HOST_PASSWORD = 'ivyohdflikhjnbbi'

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER

# ADMINS = [
#     ('admin1', 'skillfactory.course@yandex.ru'),]

# Данный код устанавливает определенные параметры для модуля "django-allauth", который предоставляет функциональность для аутентификации пользователей в Django. 
#  1. ACCOUNT_EMAIL_REQUIRED = True - требуется ли адрес электронной почты для каждого пользователя. 
# 2. ACCOUNT_UNIQUE_EMAIL = True - требуется ли уникальный адрес электронной почты для каждого пользователя. 
# 3. ACCOUNT_USERNAME_REQUIRED = True - требуется ли имя пользователя для каждого пользователя. 
# 4. ACCOUNT_AUTHENTICATION_METHOD = 'username_email' - метод аутентификации, который позволяет пользователям входить в систему с помощью имени пользователя или адреса электронной почты. 
# 5. ACCOUNT_SESSION_REMEMBER = False - отключение функции "запомнить меня" при входе в систему. 
# 6. ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True - требование ввода пароля дважды при регистрации нового пользователя. 
# 7. ACCOUNT_EMAIL_VERIFICATION = 'mandatory' - обязательное подтверждение адреса электронной почты при регистрации нового пользователя. 
# 8. ACCOUNT_CONFIRM_EMAIL_ON_GET = True - подтверждение адреса электронной почты при переходе по ссылке в электронном письме, отправленном пользователю.  
#  Каждый из этих параметров определяет, каким образом пользователи могут входить в систему, какие данные требуются для регистрации нового пользователя и какие дополнительные шаги необходимо выполнить для подтверждения адреса электронной почты.
